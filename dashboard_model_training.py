"""
Model Eƒüitimi Tab - Dashboard Mod√ºl√º
"""

import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import sys
import os
from datetime import datetime

# Proje mod√ºllerini import et
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))
sys.path.append(os.path.dirname(__file__))

from data_loader import DataLoader
from feature_engineering import FeatureEngineer
from model_train import StockDirectionPredictor
from backtest import Backtester
from dashboard_utils import load_config, analyze_stock_characteristics, get_auto_params

def show_model_training_tab(all_symbols):
    """Model Eƒüitimi Tab"""
    
    st.header("üéØ Akƒ±llƒ± Model Eƒüitimi")
    
    # Hisse se√ßimi ve analiz
    stock_options = all_symbols  # Ana dropdown'daki t√ºm hisseleri kullan
    selected_stock = st.selectbox("üìä Eƒüitim i√ßin Hisse Se√ßin:", stock_options, key="training_stock_selection")
    
    # Hisse analizi
    if selected_stock:
        with st.spinner("Hisse analiz ediliyor..."):
            analysis = analyze_stock_characteristics(selected_stock)
            
            # Dinamik g√ºven e≈üiƒüi hesapla
            if analysis:
                volatility = analysis['volatility']
                if volatility > 0.6:
                    dynamic_threshold = 0.45
                    threshold_color = "error"
                elif volatility > 0.4:
                    dynamic_threshold = 0.50
                    threshold_color = "warning"
                elif volatility > 0.25:
                    dynamic_threshold = 0.55
                    threshold_color = "info"
                else:
                    dynamic_threshold = 0.60
                    threshold_color = "success"
                
                st.info(f"üéØ Dinamik G√ºven E≈üiƒüi: **{dynamic_threshold:.2f}** (Volatilite: %{volatility*100:.1f})")
            
        if analysis:
            st.success("‚úÖ Hisse analizi tamamlandƒ±!")
            
            # Hisse karakteristikleri
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                volatility_pct = analysis['volatility'] * 100
                if volatility_pct > 40:
                    st.error(f"üî• Volatilite: %{volatility_pct:.1f} (Y√ºksek)")
                elif volatility_pct > 25:
                    st.warning(f"‚ö†Ô∏è Volatilite: %{volatility_pct:.1f} (Orta)")
                else:
                    st.success(f"‚úÖ Volatilite: %{volatility_pct:.1f} (D√º≈ü√ºk)")
            
            with col2:
                volume_millions = analysis['avg_volume'] / 1_000_000
                st.info(f"üìä Ortalama Hacim: {volume_millions:.1f}M")
            
            with col3:
                range_pct = analysis['price_range'] * 100
                st.info(f"üìà Fiyat Aralƒ±ƒüƒ±: %{range_pct:.1f}")
            
            with col4:
                trend_pct = analysis['trend_strength'] * 100
                st.info(f"üìä Trend G√ºc√º: %{trend_pct:.1f}")
            
            # Akƒ±llƒ± parametre √∂nerileri
            st.subheader("üß† Akƒ±llƒ± Parametre √ñnerileri")
            
            recommendations = analysis['recommendations']
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.write("**üéØ Model √ñnerileri:**")
                st.success(f"Model Karma≈üƒ±klƒ±ƒüƒ±: {recommendations['model_complexity']}")
                st.success(f"Risk Seviyesi: {recommendations['risk_level']}")
                
                # √ñnerilen parametreler
                st.write("**üìã √ñnerilen Deƒüerler:**")
                st.code(f"""
Max Depth: {recommendations['max_depth']}
Learning Rate: {recommendations['learning_rate']}
Stop Loss: %{recommendations['stop_loss']*100:.0f}
Take Profit: %{recommendations['take_profit']*100:.0f}
G√ºnl√ºk ƒ∞≈ülem: {recommendations['max_daily_trades']}
G√ºven E≈üiƒüi: {recommendations['confidence_threshold']:.2f}
                """)
            
            with col2:
                st.write("**üí° Neden Bu Parametreler?**")
                if analysis['volatility'] > 0.4:
                    st.info("üî• Y√ºksek volatilite ‚Üí Konservatif yakla≈üƒ±m")
                    st.info("üìâ D√º≈ü√ºk risk toleransƒ±")
                    st.info("üõ°Ô∏è G√º√ßl√º stop-loss")
                elif analysis['volatility'] > 0.25:
                    st.info("‚öñÔ∏è Orta volatilite ‚Üí Dengeli yakla≈üƒ±m")
                    st.info("üìä Orta risk seviyesi")
                    st.info("üéØ Optimal parametreler")
                else:
                    st.info("üìà D√º≈ü√ºk volatilite ‚Üí Agresif yakla≈üƒ±m")
                    st.info("üöÄ Y√ºksek risk toleransƒ±")
                    st.info("üí™ B√ºy√ºk hedefler")
    
    # Akƒ±llƒ± parametre √∂nerisi - auto_params'ƒ± her zaman tanƒ±mla
    auto_params = None
    if analysis:
        volatility = analysis['volatility']
        
        # Volatiliteye g√∂re otomatik parametre √∂nerisi
        if volatility > 0.6:  # Y√ºksek volatilite
            st.warning(f"üî• Y√ºksek Volatilite (%{volatility*100:.1f}) - Konservatif parametreler √∂neriliyor")
            auto_params = get_auto_params(volatility)
        elif volatility > 0.4:  # Orta-y√ºksek volatilite
            st.info(f"‚ö†Ô∏è Orta-Y√ºksek Volatilite (%{volatility*100:.1f}) - Dengeli parametreler")
            auto_params = get_auto_params(volatility)
        else:  # D√º≈ü√ºk volatilite
            st.success(f"‚úÖ D√º≈ü√ºk Volatilite (%{volatility*100:.1f}) - Agresif parametreler")
            auto_params = get_auto_params(volatility)
        
        # Otomatik parametreleri g√∂ster
        st.subheader("üéØ Otomatik Parametre √ñnerisi")
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric("G√ºven E≈üiƒüi", f"{auto_params['confidence']:.2f}")
            st.metric("Stop Loss", f"%{auto_params['stop_loss']*100:.0f}")
        
        with col2:
            st.metric("Take Profit", f"%{auto_params['take_profit']*100:.0f}")
            st.metric("Pozisyon B√ºy√ºkl√ºƒü√º", f"%{auto_params['position_size']*100:.0f}")
        
        with col3:
            st.metric("Max Depth", auto_params['max_depth'])
            st.metric("G√ºnl√ºk ƒ∞≈ülem", auto_params['max_trades'])
    
    # Eƒüitim ba≈ülat
    if st.button("üöÄ Model Eƒüitimini Ba≈ülat", type="primary"):
        with st.spinner("Model eƒüitiliyor..."):
            try:
                # Otomatik parametreleri kullan
                if analysis and auto_params is not None:
                    # Volatilite analizi yapƒ±ldƒ±ysa otomatik parametreleri kullan
                    dynamic_confidence = auto_params['confidence']
                    dynamic_stop_loss = auto_params['stop_loss']
                    dynamic_take_profit = auto_params['take_profit']
                    dynamic_position_size = auto_params['position_size']
                    dynamic_max_trades = auto_params['max_trades']
                    dynamic_max_depth = auto_params['max_depth']
                    dynamic_learning_rate = auto_params['learning_rate']
                else:
                    # Varsayƒ±lan parametreler
                    dynamic_confidence = 0.60
                    dynamic_stop_loss = 0.20
                    dynamic_take_profit = 0.30
                    dynamic_position_size = 0.20
                    dynamic_max_trades = 3
                    dynamic_max_depth = 4
                    dynamic_learning_rate = 0.05
                
                # Tam konfig√ºrasyonu olu≈ütur (gelecek tahmin odaklƒ±)
                full_config = {
                    'MODEL_CONFIG': {
                        'max_depth': dynamic_max_depth,  # Dinamik
                        'learning_rate': dynamic_learning_rate,  # Dinamik
                        'n_estimators': auto_params['n_estimators'] if auto_params else 100,  # Dinamik
                        'subsample': auto_params['subsample'] if auto_params else 0.8,  # Dinamik
                        'colsample_bytree': auto_params['colsample_bytree'] if auto_params else 0.8,  # Dinamik
                        'min_child_weight': auto_params['min_child_weight'] if auto_params else 1,  # Dinamik
                        'reg_alpha': auto_params['reg_alpha'] if auto_params else 0.1,  # Dinamik
                        'reg_lambda': auto_params['reg_lambda'] if auto_params else 0.1,  # Dinamik
                        'early_stopping_rounds': auto_params.get('early_stopping_rounds', 20) if auto_params else 20,  # Overfitting √∂nleme
                        'validation_fraction': auto_params.get('validation_fraction', 0.2) if auto_params else 0.2,  # Daha fazla validation
                        'random_state': 42,
                        'n_jobs': -1
                    },
                    'RISK_MANAGEMENT': {
                        'max_position_size': dynamic_position_size,  # Dinamik
                        'stop_loss_pct': dynamic_stop_loss,  # Dinamik
                        'take_profit_pct': dynamic_take_profit,  # Dinamik
                        'max_daily_trades': dynamic_max_trades,  # Dinamik
                        'confidence_threshold': dynamic_confidence  # Dinamik g√ºven e≈üiƒüi
                    },
                    'DATA_CONFIG': {
                        'train_test_split': 0.8,
                        'min_volume_threshold': 1000000
                    },
                    'BACKTEST_CONFIG': {
                        'start_date': "2020-01-01",
                        'end_date': "2024-01-01",
                        'initial_capital': 100000,
                        'commission_rate': 0.0000,
                        'slippage_rate': 0.0000
                    },
                    'TARGET_STOCKS': [selected_stock]
                }
                
                # Model eƒüitimi
                predictor = StockDirectionPredictor(full_config)
                
                # Veri y√ºkle
                data_loader = DataLoader(full_config)
                data = data_loader.fetch_stock_data(selected_stock, "2y")
                
                if data.empty:
                    st.error("Veri y√ºklenemedi!")
                    return
                
                # √ñzellikler olu≈ütur
                feature_engineer = FeatureEngineer(full_config)
                features_df = feature_engineer.create_all_features(data)
                
                if features_df.empty:
                    st.error("√ñzellikler olu≈üturulamadƒ±!")
                    return
                
                # Veriyi hazƒ±rla
                X, y = predictor.prepare_data(features_df)
                
                # Model eƒüitimi
                results = predictor.train_model(X, y)
                
                # Tahminler olu≈ütur (backtest i√ßin gerekli)
                predictions, probabilities = predictor.predict(X)
                results['predictions'] = predictions
                results['probabilities'] = probabilities
                
                # Modeli kaydet
                model_path = predictor.save_model(f"{selected_stock.replace('.IS', '')}_Model_{datetime.now().strftime('%Y%m%d_%H%M%S')}.joblib")
                
                st.success("‚úÖ Model eƒüitimi tamamlandƒ±!")
                
                # Sonu√ßlarƒ± g√∂ster - Anla≈üƒ±lƒ±r format
                st.subheader("üìä Model Performansƒ±")
                
                # Model g√ºvenilirliƒüi
                test_accuracy = results['test_metrics']['accuracy']
                test_f1 = results['test_metrics']['f1']
                
                col1, col2, col3, col4 = st.columns(4)
                
                with col1:
                    if test_accuracy > 0.7:
                        st.success(f"üéØ Model G√ºvenilirliƒüi: Y√ºksek (%{test_accuracy*100:.1f})")
                    elif test_accuracy > 0.6:
                        st.warning(f"‚ö†Ô∏è Model G√ºvenilirliƒüi: Orta (%{test_accuracy*100:.1f})")
                    else:
                        st.error(f"‚ùå Model G√ºvenilirliƒüi: D√º≈ü√ºk (%{test_accuracy*100:.1f})")
                
                with col2:
                    if test_f1 > 0.7:
                        st.success(f"üéØ Kazanma ≈ûansƒ±: Y√ºksek (%{test_f1*100:.1f})")
                    elif test_f1 > 0.6:
                        st.warning(f"‚ö†Ô∏è Kazanma ≈ûansƒ±: Orta (%{test_f1*100:.1f})")
                    else:
                        st.error(f"‚ùå Kazanma ≈ûansƒ±: D√º≈ü√ºk (%{test_f1*100:.1f})")
                
                with col3:
                    train_accuracy = results['train_metrics']['accuracy']
                    if train_accuracy - test_accuracy > 0.1:
                        st.warning("‚ö†Ô∏è Overfitting Riski")
                    else:
                        st.success("‚úÖ Model Dengeli")
                
                with col4:
                    st.success("‚úÖ Model Kaydedildi")
                
                # Model durumu √∂zeti
                if test_accuracy > 0.7 and test_f1 > 0.6:
                    st.success("üöÄ Model durumu: M√ºkemmel! Hemen kullanabilirsin.")
                elif test_accuracy > 0.6 and test_f1 > 0.5:
                    st.warning("‚ö†Ô∏è Model durumu: ƒ∞yi ama daha iyi olabilir.")
                else:
                    st.error("‚ùå Model durumu: Zayƒ±f. Parametreleri ayarla.")
                
                # Feature importance
                st.subheader("üîç En √ñnemli √ñzellikler")
                
                if isinstance(results, dict) and 'feature_importance' in results:
                    importance_data = results['feature_importance']
                    
                    if importance_data is not None and not importance_data.empty:
                        importance_df = importance_data.head(10)
                        
                        fig = px.bar(
                            importance_df, 
                            x='importance', 
                            y='feature',
                            orientation='h',
                            title="Top 10 Feature Importance"
                        )
                        fig.update_layout(height=500)
                        st.plotly_chart(fig, use_container_width=True)
                    else:
                        st.warning("‚ö†Ô∏è Feature importance verisi bo≈ü!")
                        
                        # Alternatif: Model'den direkt feature importance al
                        if hasattr(predictor.model, 'feature_importances_'):
                            st.info("üîÑ Model'den direkt feature importance alƒ±nƒ±yor...")
                            
                            # Feature isimlerini al
                            feature_names = X.columns.tolist()
                            importances = predictor.model.feature_importances_
                            
                            # DataFrame olu≈ütur
                            importance_df = pd.DataFrame({
                                'feature': feature_names,
                                'importance': importances
                            }).sort_values('importance', ascending=False).head(10)
                            
                            fig = px.bar(
                                importance_df, 
                                x='importance', 
                                y='feature',
                                orientation='h',
                                title="Top 10 Feature Importance (Direct)"
                            )
                            fig.update_layout(height=500)
                            st.plotly_chart(fig, use_container_width=True)
                        else:
                            st.error("‚ùå Model'de feature importance bulunamadƒ±!")
                else:
                    st.warning("‚ö†Ô∏è Feature importance bulunamadƒ±!")
                
                # Model dosya yolu
                st.info(f"üìÅ Model kaydedildi: `{model_path}`")
                
                # Dinamik parametreler bilgisi
                st.subheader("üéØ Kullanƒ±lan Dinamik Parametreler")
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    st.metric("G√ºven E≈üiƒüi", f"{dynamic_confidence:.2f}")
                    st.metric("Stop Loss", f"%{dynamic_stop_loss*100:.0f}")
                
                with col2:
                    st.metric("Take Profit", f"%{dynamic_take_profit*100:.0f}")
                    st.metric("Pozisyon B√ºy√ºkl√ºƒü√º", f"%{dynamic_position_size*100:.0f}")
                
                with col3:
                    st.metric("Max Depth", dynamic_max_depth)
                    st.metric("G√ºnl√ºk ƒ∞≈ülem", dynamic_max_trades)
                
                # Otomatik backtest √ßalƒ±≈ütƒ±r
                st.subheader("üìà Otomatik Backtest")
                st.info("Model eƒüitimi tamamlandƒ±! Dinamik parametrelerle backtest √ßalƒ±≈ütƒ±rƒ±lƒ±yor...")
                
                with st.spinner("Backtest √ßalƒ±≈ütƒ±rƒ±lƒ±yor..."):
                    try:
                        backtester = Backtester(full_config)
                        backtest_results = backtester.run_backtest(features_df, 
                                                                 results['predictions'], 
                                                                 results['probabilities'], 
                                                                 selected_stock)
                        
                        st.success("‚úÖ Backtest tamamlandƒ±!")
                        
                        # Sonu√ßlarƒ± g√∂ster
                        col1, col2, col3 = st.columns(3)
                        
                        # Performans metriklerini al
                        performance_metrics = backtest_results.get('performance_metrics', {})
                        
                        with col1:
                            st.metric("Toplam Getiri", f"%{backtest_results['total_return']*100:.1f}")
                        with col2:
                            st.metric("Kazanma Oranƒ±", f"%{performance_metrics.get('win_rate', 0)*100:.1f}")
                        with col3:
                            st.metric("Sharpe Ratio", f"{performance_metrics.get('sharpe_ratio', 0):.2f}")
                        
                        # ƒ∞≈ülem sayƒ±sƒ± ve detaylƒ± bilgi
                        trades_count = len(backtest_results.get('trades', []))
                        st.info(f"üìä Toplam ƒ∞≈ülem Sayƒ±sƒ±: {trades_count}")
                        
                        # Detaylƒ± performans bilgileri
                        st.subheader("üìà Detaylƒ± Performans")
                        col1, col2, col3, col4 = st.columns(4)
                        
                        with col1:
                            st.metric("Yƒ±llƒ±k Getiri", f"%{performance_metrics.get('annualized_return', 0)*100:.1f}")
                        with col2:
                            st.metric("Max Drawdown", f"%{performance_metrics.get('max_drawdown', 0)*100:.1f}")
                        with col3:
                            st.metric("Volatilite", f"%{performance_metrics.get('volatility', 0)*100:.1f}")
                        with col4:
                            st.metric("Ort. ƒ∞≈ülem S√ºresi", f"{performance_metrics.get('avg_trade_duration', 0):.1f} g√ºn")
                        
                        # Kullanƒ±lan parametreler
                        st.subheader("‚öôÔ∏è Kullanƒ±lan Parametreler")
                        col1, col2, col3 = st.columns(3)
                        
                        with col1:
                            st.info(f"""
                            **Risk Y√∂netimi:**
                            - G√ºven E≈üiƒüi: {dynamic_confidence:.2f}
                            - Stop Loss: %{dynamic_stop_loss*100:.0f}
                            - Take Profit: %{dynamic_take_profit*100:.0f}
                            """)
                        
                        with col2:
                            st.info(f"""
                            **Pozisyon Y√∂netimi:**
                            - Pozisyon B√ºy√ºkl√ºƒü√º: %{dynamic_position_size*100:.0f}
                            - Max G√ºnl√ºk ƒ∞≈ülem: {dynamic_max_trades}
                            - Model Karma≈üƒ±klƒ±ƒüƒ±: {dynamic_max_depth}
                            """)
                        
                        with col3:
                            st.info(f"""
                            **Backtest Bilgileri:**
                            - Ba≈ülangƒ±√ß Sermayesi: {full_config['BACKTEST_CONFIG']['initial_capital']:,} TL
                            - Final Sermayesi: {backtest_results.get('final_capital', 0):,.0f} TL
                            - Komisyon: %{full_config['BACKTEST_CONFIG']['commission_rate']*100:.2f}
                            """)
                        
                        if trades_count > 0:
                            st.success("üéâ Model √ßalƒ±≈üƒ±yor! ƒ∞≈ülemler yapƒ±ldƒ±.")
                            
                            # ƒ∞≈ülem detaylarƒ±
                            with st.expander("üîç ƒ∞≈ülem Detaylarƒ±", expanded=False):
                                trades = backtest_results.get('trades', [])
                                if trades:
                                    trades_df = pd.DataFrame(trades)
                                    st.dataframe(trades_df[['date', 'action', 'price', 'quantity', 'confidence', 'capital_after']])
                        else:
                            st.warning("‚ö†Ô∏è Hen√ºz i≈ülem yapƒ±lmadƒ±. Parametreler ayarlanabilir.")
                            st.info("üí° **D√º≈ü√ºk getiri sebepleri:**")
                            st.info("‚Ä¢ G√ºven e≈üiƒüi √ßok y√ºksek olabilir")
                            st.info("‚Ä¢ Pozisyon b√ºy√ºkl√ºƒü√º √ßok k√º√ß√ºk olabilir")
                            st.info("‚Ä¢ Model √ßok az sinyal √ºretiyor olabilir")
                    
                    except Exception as e:
                        st.error(f"Backtest hatasƒ±: {str(e)}")
            
            except Exception as e:
                st.error(f"Model eƒüitimi hatasƒ±: {str(e)}")
