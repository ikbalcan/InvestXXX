#!/usr/bin/env python3
"""
Hisse Senedi YÃ¶n Tahmini Sistemi - Ana Ã‡alÄ±ÅŸtÄ±rma Scripti
"""

import sys
import os
import yaml
import logging
import argparse
import pandas as pd
import numpy as np
import time
import schedule
from datetime import datetime
from typing import Dict, List

# Proje modÃ¼llerini import et
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from data_loader import DataLoader
from feature_engineering import FeatureEngineer
from model_train import StockDirectionPredictor
from backtest import Backtester
from live_trade import PaperTrader, LiveSignalGenerator

# Logging ayarlarÄ±
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/system.log'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

class StockPredictionSystem:
    def __init__(self, config_path: str = 'config.yaml'):
        """Sistemi baÅŸlatÄ±r"""
        self.config_path = config_path
        self.config = self.load_config()
        
        # ModÃ¼lleri baÅŸlat
        self.data_loader = DataLoader(self.config)
        self.feature_engineer = FeatureEngineer(self.config)
        self.predictor = StockDirectionPredictor(self.config)
        self.backtester = Backtester(self.config)
        self.paper_trader = PaperTrader(self.config)
        self.signal_generator = LiveSignalGenerator(self.config)
        
        logger.info("Hisse Senedi YÃ¶n Tahmini Sistemi baÅŸlatÄ±ldÄ±")
    
    def load_config(self) -> Dict:
        """KonfigÃ¼rasyon dosyasÄ±nÄ± yÃ¼kler"""
        try:
            with open(self.config_path, 'r', encoding='utf-8') as f:
                config = yaml.safe_load(f)
            logger.info(f"KonfigÃ¼rasyon yÃ¼klendi: {self.config_path}")
            return config
        except Exception as e:
            logger.error(f"KonfigÃ¼rasyon yÃ¼kleme hatasÄ±: {str(e)}")
            raise
    
    def train_model(self, symbols: List[str] = None, period: str = "2y", model_name: str = None) -> str:
        """Model eÄŸitir"""
        logger.info("Model eÄŸitimi baÅŸlÄ±yor...")
        
        if symbols is None:
            symbols = self.config.get('TARGET_STOCKS', [])
        
        # Veri yÃ¼kle
        logger.info(f"Veri yÃ¼kleniyor: {symbols}")
        all_data = self.data_loader.fetch_multiple_stocks(symbols, period)
        
        if not all_data:
            logger.error("Veri yÃ¼klenemedi!")
            return None
        
        # Ã–zellikleri oluÅŸtur ve birleÅŸtir
        all_features = []
        
        for symbol, data in all_data.items():
            logger.info(f"Ã–zellikler oluÅŸturuluyor: {symbol}")
            features_df = self.feature_engineer.create_all_features(data)
            
            if not features_df.empty:
                features_df['symbol'] = symbol
                all_features.append(features_df)
        
        if not all_features:
            logger.error("Ã–zellik oluÅŸturulamadÄ±!")
            return None
        
        # TÃ¼m verileri birleÅŸtir
        combined_features = pd.concat(all_features, ignore_index=False)
        logger.info(f"BirleÅŸtirilmiÅŸ veri boyutu: {combined_features.shape}")
        
        # Model iÃ§in veriyi hazÄ±rla
        X, y = self.predictor.prepare_data(combined_features)
        
        # Model eÄŸitimi
        results = self.predictor.train_model(X, y)
        
        # Modeli kaydet
        if model_name:
            # Ã–zel isimle kaydet
            model_path = self.predictor.save_model(f"{model_name}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.joblib")
        else:
            model_path = self.predictor.save_model()
        
        logger.info("Model eÄŸitimi tamamlandÄ±!")
        logger.info(f"Test Accuracy: {results['test_metrics']['accuracy']:.4f}")
        logger.info(f"Test F1 Score: {results['test_metrics']['f1']:.4f}")
        logger.info(f"Model kaydedildi: {model_path}")
        
        return model_path
    
    def run_backtest(self, model_path: str, symbols: List[str] = None) -> Dict:
        """Backtest Ã§alÄ±ÅŸtÄ±rÄ±r"""
        logger.info("Backtest baÅŸlÄ±yor...")
        
        if symbols is None:
            symbols = self.config.get('TARGET_STOCKS', [])
        
        # Modeli yÃ¼kle
        if not self.predictor.load_model(model_path):
            logger.error("Model yÃ¼klenemedi!")
            return None
        
        all_results = {}
        
        for symbol in symbols:
            logger.info(f"Backtest Ã§alÄ±ÅŸtÄ±rÄ±lÄ±yor: {symbol}")
            
            # Veri yÃ¼kle
            data = self.data_loader.fetch_stock_data(symbol, "2y")
            
            if data.empty:
                logger.warning(f"Veri bulunamadÄ±: {symbol}")
                continue
            
            # Ã–zellikleri oluÅŸtur
            features_df = self.feature_engineer.create_all_features(data)
            
            if features_df.empty:
                logger.warning(f"Ã–zellik oluÅŸturulamadÄ±: {symbol}")
                continue
            
            # Tahminler
            X, y = self.predictor.prepare_data(features_df)
            predictions, probabilities = self.predictor.predict(X)
            
            # Backtest
            results = self.backtester.run_backtest(features_df, predictions, probabilities, symbol)
            
            if results:
                all_results[symbol] = results
                
                # Grafik kaydet
                plot_path = f"logs/backtest_{symbol}_{datetime.now().strftime('%Y%m%d')}.png"
                self.backtester.plot_results(plot_path)
                
                # Rapor yazdÄ±r
                report = self.backtester.generate_report()
                logger.info(f"\n{report}")
        
        # Genel Ã¶zet
        if all_results:
            total_return = sum([r['total_return'] for r in all_results.values()]) / len(all_results)
            logger.info(f"\n=== GENEL BACKTEST Ã–ZETÄ° ===")
            logger.info(f"Ortalama Getiri: {total_return:.2%}")
            logger.info(f"Test Edilen Hisse SayÄ±sÄ±: {len(all_results)}")
        
        return all_results
    
    def run_paper_trading(self, model_path: str, symbols: List[str] = None) -> None:
        """Paper trading baÅŸlatÄ±r"""
        logger.info("Paper trading baÅŸlÄ±yor...")
        
        if symbols is None:
            symbols = self.config.get('TARGET_STOCKS', [])
        
        # Modeli yÃ¼kle
        if not self.predictor.load_model(model_path):
            logger.error("Model yÃ¼klenemedi!")
            return
        
        # Signal generator'Ä± baÅŸlat
        self.signal_generator.load_model(model_path)
        
        # GÃ¼nlÃ¼k sinyal Ã¼retimi
        def daily_signal_job():
            self.signal_generator.run_daily_signal_generation()
        
        # Schedule ayarla (her gÃ¼n saat 09:30'da)
        schedule.every().day.at("09:30").do(daily_signal_job)
        
        logger.info("Paper trading baÅŸlatÄ±ldÄ±. GÃ¼nlÃ¼k sinyaller saat 09:30'da Ã¼retilecek.")
        logger.info("Ã‡Ä±kmak iÃ§in Ctrl+C basÄ±n.")
        
        try:
            while True:
                schedule.run_pending()
                time.sleep(60)  # Her dakika kontrol et
        except KeyboardInterrupt:
            logger.info("Paper trading durduruldu.")
    
    def generate_signals(self, model_path: str, symbols: List[str] = None) -> Dict:
        """AnlÄ±k sinyal Ã¼retir"""
        logger.info("Sinyal Ã¼retimi baÅŸlÄ±yor...")
        
        if symbols is None:
            symbols = self.config.get('TARGET_STOCKS', [])
        
        # Modeli yÃ¼kle
        if not self.predictor.load_model(model_path):
            logger.error("Model yÃ¼klenemedi!")
            return None
        
        # Signal generator'Ä± baÅŸlat
        self.signal_generator.load_model(model_path)
        
        # Sinyalleri Ã¼ret
        signals = self.signal_generator.generate_signals(symbols)
        
        # SonuÃ§larÄ± gÃ¶ster
        logger.info("\n=== SÄ°NYAL RAPORU ===")
        for symbol, signal in signals.items():
            if signal:
                action = "ðŸŸ¢ AL" if signal['prediction'] == 1 else "ðŸ”´ SAT"
                logger.info(f"{symbol}: {action} - GÃ¼ven: {signal['confidence']:.2f} - "
                          f"Fiyat: {signal['current_price']:.2f} - "
                          f"Ä°ÅŸlem: {signal['action_taken']}")
        
        return signals
    
    def show_portfolio_status(self) -> None:
        """PortfÃ¶y durumunu gÃ¶sterir"""
        summary = self.paper_trader.get_portfolio_summary()
        
        logger.info("\n=== PORTFÃ–Y DURUMU ===")
        logger.info(f"Mevcut Sermaye: {summary['current_capital']:,.0f} TL")
        logger.info(f"Toplam DeÄŸer: {summary['total_value']:,.0f} TL")
        logger.info(f"Toplam Getiri: {summary['total_return']:.2%}")
        logger.info(f"Aktif Pozisyonlar: {summary['positions']}")
        
        if summary['position_values']:
            logger.info("\nPozisyonlar:")
            for symbol, value in summary['position_values'].items():
                logger.info(f"  {symbol}: {value:,.0f} TL")
        
        if summary['recent_trades']:
            logger.info("\nSon Ä°ÅŸlemler:")
            for trade in summary['recent_trades']:
                logger.info(f"  {trade['date'].strftime('%H:%M')} - {trade['symbol']} - "
                          f"{trade['action']} - {trade['price']:.2f}")

def main():
    """Ana fonksiyon"""
    parser = argparse.ArgumentParser(description='Hisse Senedi YÃ¶n Tahmini Sistemi')
    parser.add_argument('command', choices=['train', 'backtest', 'paper-trade', 'signals', 'portfolio'],
                       help='Ã‡alÄ±ÅŸtÄ±rÄ±lacak komut')
    parser.add_argument('--model-path', help='Model dosya yolu')
    parser.add_argument('--symbols', nargs='+', help='Ä°ÅŸlem yapÄ±lacak hisse senetleri')
    parser.add_argument('--period', default='2y', help='Veri periyodu')
    parser.add_argument('--model-name', help='Model ismi (opsiyonel)')
    
    args = parser.parse_args()
    
    try:
        # Sistemi baÅŸlat
        system = StockPredictionSystem()
        
        if args.command == 'train':
            # Model eÄŸitimi
            model_path = system.train_model(args.symbols, args.period, args.model_name)
            if model_path:
                logger.info(f"Model eÄŸitimi tamamlandÄ±: {model_path}")
        
        elif args.command == 'backtest':
            # Backtest
            if not args.model_path:
                logger.error("Backtest iÃ§in model yolu gerekli!")
                return
            
            results = system.run_backtest(args.model_path, args.symbols)
            if results:
                logger.info("Backtest tamamlandÄ±!")
        
        elif args.command == 'paper-trade':
            # Paper trading
            if not args.model_path:
                logger.error("Paper trading iÃ§in model yolu gerekli!")
                return
            
            system.run_paper_trading(args.model_path, args.symbols)
        
        elif args.command == 'signals':
            # Sinyal Ã¼retimi
            if not args.model_path:
                logger.error("Sinyal Ã¼retimi iÃ§in model yolu gerekli!")
                return
            
            signals = system.generate_signals(args.model_path, args.symbols)
            if signals:
                logger.info("Sinyal Ã¼retimi tamamlandÄ±!")
        
        elif args.command == 'portfolio':
            # PortfÃ¶y durumu
            system.show_portfolio_status()
    
    except Exception as e:
        logger.error(f"Sistem hatasÄ±: {str(e)}")
        raise

if __name__ == "__main__":
    main()
